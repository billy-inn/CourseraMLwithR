}
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
head(plotDf)
library(ggplot2)
ggplot(data=plotDf, aes(x=dof,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
dim(ShrinkageFactor)
71(8)
71*8
dim(classRes)
class(betaREs)
dim(betaRes)
plotDf$class
plotDf$beta
plotDf$s
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
s
plot(fit, xvars="norm")
?plot.glmnet
plot(fit, xvar="lambda")
plot(fit, xvar="dev")
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
lambda
s
beta[,num]
lm.fit$coefficients
min(lambda)
max(lambda)
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(lm.fit$coefficients)
fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1,
lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=100))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(beta, 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(lm.fit$coefficients)
fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1,
lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=1000))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(beta, 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
lm.fit$coefficients
coef_sum <- sum(abs(lm.fit$coefficients))
coef_sum
s <- apply(abs(beta), 2, sum)/coef_sum
s
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(abs(lm.fit$coefficients))
fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1,
lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=1000))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(abs(beta), 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(abs(lm.fit$coefficients))
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
#lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
#                    family="gaussian", alpha=1,
#                    lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=1000))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(abs(beta), 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.36, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.365, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.368, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.37, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10: Profiles of lasso coefficients for the prostate cancer example",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.37, alpha=0.5), color="red", linetype="dashed", size=1)
install.packages("mxnet", repo="http://104.131.113.222")
?matrix
A <- matrix(c(1,1,1,1,0,1,3,4), nrow=4, ncol=2)
A
t(A) * A
t(A) %*% A
?inv
library(mass)
library(Mass)
library(MASS)
?inv
?ginv
b <- vector(c(0,8,8,20))
?vector
b <- as.vector(c(0,8,8,20))
b
t(A) %*% b
p <- A %*% ginv(t(A) %*% A) %*% t(A) %*% b
p
e <- b-p
e
E <- sum(e^2)
E
t(e) %*% A[,1]
t(e) %*% A[,2]
A[,1]
A[,2]
require(quantmod)
getSymbols.oanda("USD/EUR", from="2016-01-01")
getSymbols("USD/EUR", src="oanda", from="2016-01-01")
USDEUR
getSymbols("CNY/CAD", src="oanda", from="2016-01-01")
CNYCAD
getSymbols("CAD/CNY", src="oanda", from="2016-01-01")
CADCNY
require(quantmod)
rate <- getSymbols("CAD/CNY",src="ondoa",from="2016-01-01")
rate <- getSymbols("CAD/CNY",src="oanda",from="2016-01-01")
rate
str(rate)
CADCNY
rm(rate)
getSymbols("USD/CNY",src="oanda",from="2016-01-01")
USDCNY
plot(USDCNY)
plot(CADCNY)
getSymbols("USD/CAD",src="oanda",from="2016-01-01")
plot(USDCAD)
rate <- getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
rm(rate)
CADCNY
min(CADCNY)
plot(CADCNY)
getSymbols("USD/CNY",src="oanda",from="2015-01-01")
plot(USDCNY)
getSymbols("USD/CAD",src="oanda",from="2015-01-01")
plot(USDCAD)
plot(CADCNY)
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
require(quantmod)
getSymbols('CADCNY', src="oanda", from=2016-01-01)
getSymbols('CADCNY', src="oanda", from="2016-01-01")
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
CADCNY
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
require('quantmod')
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
require('quantmod')
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
getwd()
s = getwd()
s += "/CMPUT466"
s = s + "/CMPUT466"
help(s)
setwd("~/Coding/R/CMPUT466/mlclass-ex1")
getwd()
data <- read.csv("ex1data1.txt", header=FALSE)
?read.csv
data
str(data)
X = data["V1"]
str(X)
X = data$V1
names(data)
data.colnames
library(ggplot2)
dim(data)
length(data)
width(data)
shape(data)
dim(data)[1]
qplot(X, Y)
Y = data$V2
qplot(X, Y)
rm(s)
qplot(V1, V2, data)
names(data)
qplot(V1, V2, data=data)
qplot(V1, V2, data=data, color=I("red"))
qplot(V1, V2, data=data, color=I("red"), shape=I(2))
qplot(V1, V2, data=data, color=I("red"), shape=I(3))
qplot(V1, V2, data=data, color=I("red"), shape=I(4))
qplot(V1, V2, data=data, color=I("red"), shape=I(4)) +
labs(title="Figure 1: Scatter plot of training data",
x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(10)) +
a
qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(10)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(1)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(3)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(3)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
ones(3,1)
data$V3 = 1
head(data)
type(X)
class(X)
class(data)
data[:, c["V1", "V2"]]
data[:, c("V1", "V2")]
data[, c("V1", "V2")]
X <- data[, c("V3", "V1")]
X.T
matrix(X)
X = matrix(X)
X
X[1]
X[2]
X.T
class(X)
T(X)
??transpose
X.t
t(X)
theta <- as.matrix((0, 0))
theta <- as.matrix([0, 0])
X <- as.matrix(data[, c("V3", "V1")])
y <- as.matrix(data$V2)
X
length(X)
dim(X)
??print
print(1)
print(y)
??matrix
theta <- matrix(0, 2, 1)
theta
X %*% theta
computeCost(X, y, theta)
computeCost = function(X, y, theta) {
m = length(X)
return sum(((X %*% theta) - y)^2)
}
computeCost = function(X, y, theta) {
m = length(X)
return(sum(((X %*% theta) - y)^2))
}
computeCost(X, y, theta)
computeCost = function(X, y, theta) {
m = length(X)
return(sum(((X %*% theta) - y)^2)/(2*m))
}
computeCost(X, y, theta)
computeCost = function(X, y, theta) {
m = length(X)
return(sum(((X %*% theta) - y)^2)/(m))
}
computeCost(X, y, theta)
computeCost = function(X, y, theta) {
m = length(X)
return(sum(((X %*% theta) - y)^2)/m)
}
computeCost(X, y, theta)
?ones
?zeros
??ones
iterations <- 1500
alpha <- 0.01
J_history <- matrix(0, iterations, 1)
J_history(1) = 1
J_history[1] = 1
head(J_history)
J_history <- matrix(0, iterations, 1)
1:3
for(i <- 1:iterations) {
theta <- theta - alpha/m*t(X)*(X %*% theta - y)
J_history[i] <- computeCost(X, y, theta)
}
for(i in 1:iterations) {
theta <- theta - alpha/m*t(X)*(X %*% theta - y)
J_history[i] <- computeCost(X, y, theta)
}
m <- length(y)
for(i in 1:iterations) {
theta <- theta - alpha/m*t(X)*(X %*% theta - y)
J_history[i] <- computeCost(X, y, theta)
}
alpha/m*t(X)*(X %*% theta - y)
for(i in 1:iterations) {
theta <- theta - alpha/m*t(X) %*% (X %*% theta - y)
J_history[i] <- computeCost(X, y, theta)
}
theta
?geom_line
?geom_vline
?geom_abline
p + geom_abline()
p <- qplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(3)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p + geom_abline()
p + geom_abline(color=I("Blue"))
p + qplot(X[,2], X %*% theta)
?geom_line
p + geom_line(X[,2], X %*% theta)
p + geom_line(aes(X[,2], X %*% theta))
p + geom_abline(color=I("Blue")) + geom_line(aes(X[,2], X %*% theta))
p + geom_abline(color=I("Blue")) + geom_line(aes(X[,2], X %*% theta, color=I("Green")))
p + geom_abline(color=I("Blue")) + geom_line(aes(X[,2], X %*% theta), color=I("Green"))
?scale_fill_discrete()
p + geom_abline(color=I("Blue")) +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
scale_fill_discrete(name="This is my legend")
p + geom_abline(color=I("Blue")) +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), "Gradient Desent")
p + geom_abline(color=I("Blue")) +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), label="Gradient Desent")
p + geom_abline(color=I("Blue")) +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), label="GD")
p + geom_abline(color=I("Blue")) +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), color=I("Green"), label="GD")
p + geom_abline(color=I("Blue")) +
geom_text(aes(10, 15), color=I("Blue"), label="optimal") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), color=I("Green"), label="GD")
p <- ggplot(V1, V2, data=data, color=I("red"), shape=I(4), size=I(3)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p <- ggplot(data=data, aes(V1, V2, color=I("red"), shape=I(4), size=I(3))) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p + geom_abline(color=I("Blue")) +
geom_text(aes(10, 15), color=I("Blue"), label="optimal") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), color=I("Green"), label="GD")
p
ggplot(data=data, aes(V1, V2, color=I("red"), shape=I(4), size=I(3)), geom="point") +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
ggplot(data=data, aes(V1, V2, color=I("red"), shape=I(4), size=I(3))) + geom_point()
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p <- ggplot(data=data, aes(V1, V2, color=I("red"), shape=I(4), size=I(3))) + geom_point()
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p <- ggplot(data=data, aes(V1, V2, color=I("red"), shape=I(4), size=I(3))) + geom_point() +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p
ggplot(data, aes(V1, V2))
ggplot(data, aes(V1, V2)) + geom_point()
ggplot(data, aes(V1, V2, col=I("red"))) + geom_point()
?geom_point()
ggplot(data, aes(V1, V2) + geom_point(color=I("red"))
1
ggplot(data, aes(V1, V2) + geom_point(color=I("red"))
)
ggplot(data, aes(V1, V2)) + geom_point(color=I("red"))
p <- ggplot(data, aes(V1, V2)) + geom_point(color=I("red"), shape=I(4), size=I(3)) +
labs(x="Population of City in 10,000s", y="Profit in $10,000s")
p
p + geom_abline(color=I("Blue")) +
geom_text(aes(10, 15), color=I("Blue"), label="optimal") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), color=I("Green"), label="GD")
p + geom_abline(color=I("Blue")) +
annotate("text", x=10, y=15, color=I("Blue"), label="optimal") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
geom_text(aes(15, 10), color=I("Green"), label="GD")
p + geom_abline(color=I("Blue")) +
annotate("text", x=10, y=15, color=I("Blue"), label="optimal approx.") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
annotate("text", x=15, y=10, color=I("Green"), label="gradient descent approx.")
p + geom_abline(color=I("Blue")) +
annotate("text", x=10, y=14, color=I("Blue"), label="optimal approx.") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
annotate("text", x=15, y=10, color=I("Green"), label="gradient descent approx.")
p + geom_abline(color=I("Blue")) +
annotate("text", x=10, y=13, color=I("Blue"), label="optimal approx.") +
geom_line(aes(X[,2], X %*% theta), color=I("Green")) +
annotate("text", x=15, y=10, color=I("Green"), label="gradient descent approx.")
data <- read.csv("ex1data.txt", header=FALSE)
data <- read.csv("ex1data2.txt", header=FALSE)
str(data)
