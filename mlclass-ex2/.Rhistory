coef_sum <- sum(abs(lm.fit$coefficients))
coef_sum
s <- apply(abs(beta), 2, sum)/coef_sum
s
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(abs(lm.fit$coefficients))
fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1,
lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=1000))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(abs(beta), 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
lm.fit <- lm(lpsa~., data=training_set)
coef_sum <- sum(abs(lm.fit$coefficients))
lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
family="gaussian", alpha=1)
#lasso.fit <- glmnet(as.matrix(training_set[,1:p]), training_set[,p+1],
#                    family="gaussian", alpha=1,
#                    lambda=seq(from=min(fit$lambda), to=max(fit$lambda), length=1000))
lambda <- lasso.fit$lambda
beta <- lasso.fit$beta
s <- apply(abs(beta), 2, sum)/coef_sum
num <- length(lambda)
for(i in 1:num) {
if(i == 1) {
ShrinkageFactor <- as.matrix(rep(s[i], p))
classRes <- as.matrix(1:p)
betaRes <- as.matrix(beta[,i])
} else {
ShrinkageFactor <- rbind(ShrinkageFactor, as.matrix(rep(s[i],p)))
classRes <- rbind(classRes, as.matrix(1:p))
betaRes <- rbind(betaRes, as.matrix(beta[,i]))
}
}
### Plot Figure 3.7
plotDf <- data.frame(cbind(classRes,betaRes,ShrinkageFactor))
names(plotDf) <- c("class","beta","s")
plotDf$class <- as.factor(plotDf$class)
library(ggplot2)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set))
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.36, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.365, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.368, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10:",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.37, alpha=0.5), color="red", linetype="dashed", size=1)
ggplot(data=plotDf, aes(x=s,y=beta,col=class)) + geom_line() +
labs(title="Figure 3.10: Profiles of lasso coefficients for the prostate cancer example",
x="Shrinkage Factor s", y="Coefficients (Lasso)") +
theme_bw() + scale_color_discrete(name="predictors", labels=names(training_set)) +
geom_vline(aes(xintercept=0.37, alpha=0.5), color="red", linetype="dashed", size=1)
install.packages("mxnet", repo="http://104.131.113.222")
?matrix
A <- matrix(c(1,1,1,1,0,1,3,4), nrow=4, ncol=2)
A
t(A) * A
t(A) %*% A
?inv
library(mass)
library(Mass)
library(MASS)
?inv
?ginv
b <- vector(c(0,8,8,20))
?vector
b <- as.vector(c(0,8,8,20))
b
t(A) %*% b
p <- A %*% ginv(t(A) %*% A) %*% t(A) %*% b
p
e <- b-p
e
E <- sum(e^2)
E
t(e) %*% A[,1]
t(e) %*% A[,2]
A[,1]
A[,2]
require(quantmod)
getSymbols.oanda("USD/EUR", from="2016-01-01")
getSymbols("USD/EUR", src="oanda", from="2016-01-01")
USDEUR
getSymbols("CNY/CAD", src="oanda", from="2016-01-01")
CNYCAD
getSymbols("CAD/CNY", src="oanda", from="2016-01-01")
CADCNY
require(quantmod)
rate <- getSymbols("CAD/CNY",src="ondoa",from="2016-01-01")
rate <- getSymbols("CAD/CNY",src="oanda",from="2016-01-01")
rate
str(rate)
CADCNY
rm(rate)
getSymbols("USD/CNY",src="oanda",from="2016-01-01")
USDCNY
plot(USDCNY)
plot(CADCNY)
getSymbols("USD/CAD",src="oanda",from="2016-01-01")
plot(USDCAD)
rate <- getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
rm(rate)
CADCNY
min(CADCNY)
plot(CADCNY)
getSymbols("USD/CNY",src="oanda",from="2015-01-01")
plot(USDCNY)
getSymbols("USD/CAD",src="oanda",from="2015-01-01")
plot(USDCAD)
plot(CADCNY)
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
getSymbols("CAD/CNY",src="oanda",from="2015-01-01")
plot(CADCNY)
CADCNY
require(quantmod)
getSymbols('CADCNY', src="oanda", from=2016-01-01)
getSymbols('CADCNY', src="oanda", from="2016-01-01")
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
CADCNY
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
require('quantmod')
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
require('quantmod')
getSymbols('CAD/CNY', src="oanda", from="2016-01-01")
plot(CADCNY)
data <- read.csv("ex2data1.txt", header=FALSE)
X <- as.matrix(data[,c("V1", "V2")])
y <- as.matrix(data$V3)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
setwd("~/Coding/R/CMPUT466/mlclass-ex2")
library(ggplot2)
library(R.matlab)
library(devtools)
source_url("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
data <- read.csv("ex2data1.txt", header=FALSE)
X <- as.matrix(data[,c("V1", "V2")])
y <- as.matrix(data$V3)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
costFunction <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
J <- 1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
grad <- 1./m * t(X) %*% (h-y)
list(J, grad)
}
m <- dim(X)[1]
n <- dim(X)[2]
X <- cbind(1, X)
initial_theta <- matrix(0, n+1, 1)
list[cost, grad] = costFunction(initial_theta, X, y)
cost
?optim
computeCost <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
}
computeGrad <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * t(X) %*% (h-y)
}
res <- optim(initial_theta, computeCost, computeGrad, X, y, method = "CG", control = list(maxit = 400))
theta <- res$par
computeCost(theta, X, y)
theta
computeCost <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
}
computeGrad <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * t(X) %*% (h-y)
}
res <- optim(initial_theta, computeCost, computeGrad, X, y, method = "CG", control = list(maxit = 10000))
theta <- res$par
computeCost(theta, X, y)
theta
computeCost <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
}
computeGrad <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * t(X) %*% (h-y)
}
res <- optim(initial_theta, computeCost, computeGrad, X, y, method = "L-BFGS-B", control = list(maxit = 400))
theta <- res$par
computeCost(theta, X, y)
computeCost <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
}
computeGrad <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * t(X) %*% (h-y)
}
res <- optim(initial_theta, computeCost, computeGrad, X, y, method="BFGS", control=list(maxit = 400))
theta <- res$par
computeCost(theta, X, y)
theta
plot_x = c(min(X[:,2])-2, max(X[:,2])+2)
plot_x <- c(min(X[:,2])-2, max(X[:,2])+2)
X[1,:]
X(1,:)
y[1]
y[1:3]
X[1]
class(X)
dim(X)
X[2]
X[1, 2]
X[:, 2]
X[:2]
X[,2]
plot_x <- c(min(X[,2])-2, max(X[,2])+2)
plot_x
plot_y <- (-1./theta[3])) * (theta[2] * plot_x + theta[1])
plot_y <- (-1./theta[3]) * (theta[2] * plot_x + theta[1])
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) + geom_line(x=plot_x, y=plot_y)
?geom_line
df_db <- data.frame(x=plot_x, y=plot_y)
computeCost <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
}
computeGrad <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
1./m * t(X) %*% (h-y)
}
res <- optim(initial_theta, computeCost, computeGrad, X, y, method="BFGS", control=list(maxit = 400))
theta <- res$par
computeCost(theta, X, y)
plot_x <- c(min(X[,2])-2, max(X[,2])+2)
plot_y <- (-1./theta[3]) * (theta[2] * plot_x + theta[1])
df_db <- data.frame(x=plot_x, y=plot_y)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) + geom_line(aes(plot_x, plot_y), data=df_db)
names(data)
data <- read.csv("ex2data1.txt", header=FALSE)
X <- as.matrix(data[,c("V1", "V2")])
y <- as.matrix(data$V3)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) + geom_line(aes(plot_x, plot_y), data=df_db)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
geom_line(aes(plot_x, plot_y), data=df_db) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
geom_line(aes(x, y), data=df_db) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
#geom_line(aes(x, y), data=df_db) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
df_db
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
geom_line(aes(x=x, y=y), df_db) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
geom_line(aes(x, y), df_db) +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line()
ggplot(df_db, aes(x,y)) + geom_line() + geom_point(aes(V1, V2, col=factor(V3)), data)
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) + geom_point() +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line(color="blue") +
geom_point(aes(V1, V2, col=factor(V3)), data) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("yellow", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) + geom_point(shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line(color="blue") +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("yellow", "red"))
ggplot(df_db, aes(x,y)) + geom_line(color="blue") +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(2), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("yellow", "red"))
ggplot(df_db, aes(x,y)) + geom_line(color="blue") +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(2), shape=I(2)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("yellow", "red"))
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) + xlim(30, 100) + ylim(30, 100)
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
plot_x <- c(min(X[,2]), max(X[,2]))
plot_y <- (-1./theta[3]) * (theta[2] * plot_x + theta[1])
df_db <- data.frame(x=plot_x, y=plot_y)
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) +
coord_cartesian(xlim(30, 100), ylim=c(30, 100))
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) +
coord_cartesian(ylim=c(30, 100))
?coord_cartesian
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) +
coord_cartesian(xlim=c(30, 100), ylim=c(30, 100))
plot_x <- c(min(X[,2])-10, max(X[,2])+10)
plot_y <- (-1./theta[3]) * (theta[2] * plot_x + theta[1])
df_db <- data.frame(x=plot_x, y=plot_y)
ggplot(df_db, aes(x,y)) + geom_line() +
geom_point(aes(V1, V2, col=factor(V3)), data, size=I(3), shape=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red")) +
coord_cartesian(xlim=c(30, 100), ylim=c(30, 100))
theta
c(1, 45, 85) %*% theta
prob <- sigmoid(c(1, 45, 85) %*% theta)
sigmoid <- function(x) 1./(1+exp(x))
prob <- sigmoid(c(1, 45, 85) %*% theta)
prob
sigmoid <- function(x) 1./(1+exp(-x))
prob <- sigmoid(c(1, 45, 85) %*% theta)
prob
y_prob <- sigmoid(X %*% theta)
dim(X)
costFunction <- function(theta, X, y) {
m <- length(y)
h <- 1./(1+exp(-X %*% theta))
J <- 1./m * (-t(y) %*% log(h) - t(1-y) %*% log(1-h))
grad <- 1./m * t(X) %*% (h-y)
list(J, grad)
}
m <- dim(X)[1]
n <- dim(X)[2]
X <- cbind(1, X)
initial_theta <- matrix(0, n+1, 1)
list[cost, grad] = costFunction(initial_theta, X, y)
cost
y_prob <- sigmoid(X %*% theta)
p <- y_prob > 0.5
p == y
?mean
mean(p==y) * 100.0
sigmoid <- function(x) 1./(1+exp(-x))
prob <- sigmoid(c(1, 45, 85) %*% theta)
prob
y_prob <- sigmoid(X %*% theta)
p <- y_prob > 0.5
mean(p==y) * 100.0
data <- read.csv("ex2data2.txt", header=FALSE)
X <- as.matrix(data[,c("V1", "V2")])
y <- as.matrix(data$V3)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Exam1 score", y="Exam2 score") +
scale_color_manual(name="", labels=c("Not admitted", "Admitted"), values = c("blue", "red"))
data <- read.csv("ex2data2.txt", header=FALSE)
X <- as.matrix(data[,c("V1", "V2")])
y <- as.matrix(data$V3)
ggplot(data, aes(x=V1, y=V2, col=factor(V3))) +
geom_point(shape=I(3), size=I(3)) +
labs(x="Microchip Test 1", y="Microchip Test 2") +
scale_color_manual(name="", labels=c("y = 0", "y = 1"), values = c("blue", "red"))
X1 <- X[,1]
X2 <- X[,2]
X1 * X2
mapFeature <- function(X1, X2) {
degree <- 6
out <- matrix(1, dim(X1)[2])
for(i in 1:6) {
for(j in 0:i) {
out <- cbind(out, (X1^(i-j)) * (X2^j))
}
}
out
}
X <- mapFeature(X[,1], X[,2])
mapFeature <- function(X1, X2) {
degree <- 6
out <- matrix(1, dim(X1)[2], 1)
for(i in 1:6) {
for(j in 0:i) {
out <- cbind(out, (X1^(i-j)) * (X2^j))
}
}
out
}
X <- mapFeature(X[,1], X[,2])
matrix(1, 3, 1)
mapFeature <- function(X1, X2) {
degree <- 6
out <- matrix(1, length(X1), 1)
for(i in 1:6) {
for(j in 0:i) {
out <- cbind(out, (X1^(i-j)) * (X2^j))
}
}
out
}
X <- mapFeature(X[,1], X[,2])
dim(X)
